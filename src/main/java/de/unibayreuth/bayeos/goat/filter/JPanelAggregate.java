/*******************************************************************************
 * Copyright (c) 2011 University of Bayreuth - BayCEER.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     University of Bayreuth - BayCEER - initial API and implementation
 ******************************************************************************/
/*
 * JPanelAggregate.java
 *
 * Created on 7. Mai 2004, 14:19
 */

package de.unibayreuth.bayeos.goat.filter;

import java.util.HashMap;
import java.util.Vector;

import javax.swing.JComboBox;
import javax.swing.JRadioButton;

import de.unibayreuth.bayceer.bayeos.xmlrpc.filter.AggregateFilter;
import de.unibayreuth.bayeos.goat.list.ComboBoxVectorRenderer;
import de.unibayreuth.bayeos.utils.LookUpTableFactory;
import de.unibayreuth.bayeos.utils.date.DateChanged;
import de.unibayreuth.bayeos.utils.date.DateChangedEvent;
import de.unibayreuth.bayeos.utils.date.DateChangedListener;

/**
 *
 * @author  oliver
 */
public class JPanelAggregate extends javax.swing.JPanel implements DateChanged {
    
    private AggregateFilter filter;
    private HashMap fuHash = new HashMap();
    private HashMap inHash = new HashMap();
    
    private boolean aggregationLocked ;
    
    
    // Create the listener list
    protected javax.swing.event.EventListenerList listenerList =
    new javax.swing.event.EventListenerList();


    /** Creates new form JPanelAggregate */
    public JPanelAggregate(AggregateFilter value) {        
        this.filter = value;
        initComponents();
        for (int i=0;i<jComboBoxFunction.getModel().getSize();i++){
            Vector r = (Vector)jComboBoxFunction.getItemAt(i);
            Integer id = (Integer)(r.elementAt(0));
            fuHash.put(id, r);
        }
        
        for (int i=0;i<jComboBoxInterval.getModel().getSize();i++){
            Vector r = (Vector)jComboBoxInterval.getItemAt(i);
            Integer id = (Integer)(r.elementAt(0));
            inHash.put(id, r);
        }
        setFilter(value);                
    }
    
    public boolean isOriginalSelected(){
        return jRadioButtonOriginal.isSelected();
    }
    
    public void setOriginalSelected(){
        jRadioButtonOriginal.setSelected(true);
    }
    
    
    public int getIntervallSeconds(){
        Vector r = (Vector)jComboBoxInterval.getSelectedItem(); 
        return ((Integer)r.elementAt(2)).intValue();
    }
    
    
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupSource = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jRadioButtonOriginal = new javax.swing.JRadioButton();
        jRadioButtonAggr = new javax.swing.JRadioButton();
        jPanelGrid = new javax.swing.JPanel();
        jLabelFunction = new javax.swing.JLabel();
        jLabelInterval = new javax.swing.JLabel();
        jComboBoxFunction = new JComboBox(LookUpTableFactory.getAggregationsFunktionen());
        jComboBoxInterval = new JComboBox(LookUpTableFactory.getAggregationsIntervalle());

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.TitledBorder("Data Source"));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jRadioButtonOriginal.setSelected(true);
        jRadioButtonOriginal.setText("Original");
        buttonGroupSource.add(jRadioButtonOriginal);
        jRadioButtonOriginal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonOriginalItemStateChanged(evt);
            }
        });

        jPanel1.add(jRadioButtonOriginal);

        jRadioButtonAggr.setText("Function");
        buttonGroupSource.add(jRadioButtonAggr);
        jRadioButtonAggr.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAggrItemStateChanged(evt);
            }
        });

        jPanel1.add(jRadioButtonAggr);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanelGrid.setLayout(new java.awt.GridBagLayout());

        jLabelFunction.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelFunction.setText("Function:");
        jLabelFunction.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanelGrid.add(jLabelFunction, gridBagConstraints);

        jLabelInterval.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelInterval.setText("Interval:");
        jLabelInterval.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanelGrid.add(jLabelInterval, gridBagConstraints);

        jComboBoxFunction.setRenderer(new ComboBoxVectorRenderer(1));
        jComboBoxFunction.setPreferredSize(new java.awt.Dimension(100, 24));
        jComboBoxFunction.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelGrid.add(jComboBoxFunction, gridBagConstraints);

        jComboBoxInterval.setRenderer(new ComboBoxVectorRenderer(1));
        jComboBoxInterval.setPreferredSize(new java.awt.Dimension(100, 24));
        jComboBoxInterval.setEnabled(false);
        jComboBoxInterval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxIntervalItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelGrid.add(jComboBoxInterval, gridBagConstraints);

        add(jPanelGrid, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void jRadioButtonAggrItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAggrItemStateChanged
        fireDateChanged(new DateChangedEvent(this));
    }//GEN-LAST:event_jRadioButtonAggrItemStateChanged

    private void jComboBoxIntervalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxIntervalItemStateChanged
        // TODO add your handling code here:
        fireDateChanged(new DateChangedEvent(this));
    }//GEN-LAST:event_jComboBoxIntervalItemStateChanged

    private void jRadioButtonOriginalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonOriginalItemStateChanged
        // TODO add your handling code here:
        JRadioButton b = (JRadioButton)evt.getItem();
        boolean sel = !b.isSelected();
        jComboBoxFunction.setEnabled(sel);
        jComboBoxInterval.setEnabled(sel);
        jLabelFunction.setEnabled(sel);
        jLabelInterval.setEnabled(sel);
        fireDateChanged(new DateChangedEvent(this));
    }//GEN-LAST:event_jRadioButtonOriginalItemStateChanged

    /**
     * Getter for property filter.
     * @return Value of property filter.
     */
    public AggregateFilter getFilter() {
        if (jRadioButtonOriginal.isSelected()) {
            return null;
        } else {
            Vector r = (Vector)jComboBoxFunction.getSelectedItem();    
            filter.setFunctionId((Integer)r.elementAt(0));
            r = (Vector)jComboBoxInterval.getSelectedItem();    
            filter.setIntervallId((Integer)r.elementAt(0));
            return filter;
        }
     }    
    
    /**
     * Setter for property filter.
     * @param filter New value of property filter.
     */
    public void setFilter(AggregateFilter value) {
        this.filter = value;
          
        Integer id = value.getFunctionId();
        if (fuHash.containsKey(id)) {
            jComboBoxFunction.setSelectedItem(fuHash.get(id));
        }
        
        id = value.getIntervallId();
        if (inHash.containsKey(id)) {
            jComboBoxInterval.setSelectedItem(inHash.get(id));
        }
        

    }   
    
// This methods allows classes to register for TextChangedEvents
    public void addDateChangedListener(DateChangedListener listener) {
        listenerList.add(DateChangedListener.class, listener);
    }
    
    // This methods allows classes to unregister for TextChangedEvents
    public void removeDateChangedListener(DateChangedListener listener) {
        listenerList.remove(DateChangedListener.class, listener);
    }
    
    // This private class is used to fire MyEvents
    public void fireDateChanged(DateChangedEvent evt) {
        Object[] listeners = listenerList.getListenerList();
        // Each listener occupies two elements - the first is the listener class
        // and the second is the listener instance
        for (int i=0; i<listeners.length; i+=2) {
            if (listeners[i]==DateChangedListener.class) {
                ((DateChangedListener)listeners[i+1]).changed(evt);
            }
        }
    }
        
    /**
     * Getter for property aggregationLocked.
     * @return Value of property aggregationLocked.
     */
    public boolean isAggregationLocked() {
        return aggregationLocked;
    }    

    /**
     * Setter for property aggregationLocked.
     * @param aggregationLocked New value of property aggregationLocked.
     */
    public void setAggregationLocked(boolean value) {
        this.aggregationLocked = value;
        jRadioButtonOriginal.setSelected(value);
        jRadioButtonAggr.setEnabled(!value);
    }    
        
    /**
     * Getter for property jRadioButtonOriginal.
     * @return Value of property jRadioButtonOriginal.
     */
    public javax.swing.JRadioButton getJRadioButtonOriginal() {
        return jRadioButtonOriginal;
    }
    
    /**
     * Setter for property jRadioButtonOriginal.
     * @param jRadioButtonOriginal New value of property jRadioButtonOriginal.
     */
    public void setJRadioButtonOriginal(javax.swing.JRadioButton jRadioButtonOriginal) {
        this.jRadioButtonOriginal = jRadioButtonOriginal;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupSource;
    private javax.swing.JComboBox jComboBoxFunction;
    private javax.swing.JComboBox jComboBoxInterval;
    private javax.swing.JLabel jLabelFunction;
    private javax.swing.JLabel jLabelInterval;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelGrid;
    private javax.swing.JRadioButton jRadioButtonAggr;
    private javax.swing.JRadioButton jRadioButtonOriginal;
    // End of variables declaration//GEN-END:variables
    
}
